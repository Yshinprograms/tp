package seedu.duke;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * The Saving class manages savings records, allowing users to add, delete,
 * view, and set goals for their savings.
 */
class Saving {
    /**
     * Represents a single savings record with an amount and an optional goal.
     */
    private static class SavingsRecord {
        double amount;
        String goal;

        /**
         * Constructs a SavingsRecord with a specified amount.
         * @param amount The savings amount.
         */
        public SavingsRecord(double amount) {
            this.amount = amount;
            this.goal = " ";
        }

        /**
         * Sets the goal for this savings record.
         * @param goal The goal description.
         */
        public void setGoal(String goal) {
            this.goal = goal;
        }

        @Override
        public String toString() {
            return "[" + goal + "] " + amount;
        }
    }

    private final List<SavingsRecord> savingsRecords = new ArrayList<>();

    /**
     * Adds a savings record with the specified amount.
     * @param amount The amount to save.
     */
    public void addSavings(double amount) {
        savingsRecords.add(new SavingsRecord(amount));
        System.out.println("Sure! I have added your savings:");
        System.out.println((savingsRecords.size()) + ". \t" + savingsRecords.get(savingsRecords.size() - 1));
        System.out.println("Now you have " + savingsRecords.size() + " saving(s) in your list.");
    }

    /**
     * Deletes a savings record at the specified index.
     * @param index The index of the savings record to delete.
     */
    public void deleteSavings(int index) {
        if (index >= 0 && index < savingsRecords.size()) {
            System.out.println("Sure! I have deleted the saving:");
            System.out.println((index + 1) + ". \t" + savingsRecords.get(index));
            savingsRecords.remove(index);
            System.out.println("Now you have " + savingsRecords.size() + " savings in your list.");
        } else {
            System.out.println("Invalid index.");
        }
    }

    /**
     * Displays all savings records.
     */
    public void viewSavings() {
        if (savingsRecords.isEmpty()) {
            System.out.println("No savings records.");
        } else {
            System.out.println("Here are the savings in your list:");
            for (int i = 0; i < savingsRecords.size(); i++) {
                System.out.println((i + 1) + ". \t" + savingsRecords.get(i));
            }
            System.out.println("You have " + savingsRecords.size() + " saving(s) in total.");
        }
    }

    /**
     * Sets a savings goal for a specific amount.
     * @param amount The savings amount to associate with the goal.
     * @param description The goal description.
     */
    public void setSavingsGoal(double amount, String description) {
        for (int i = 0; i < savingsRecords.size(); i++) {
            if (savingsRecords.get(i).amount == amount) {
                savingsRecords.get(i).setGoal(description);
                System.out.println("I have set your saving goal:");
                System.out.println((i + 1) + ".\t[" + description + "] " + savingsRecords.get(i).amount);
                return;
            }
        }
        System.out.println("Invalid amount.");
    }

    /**
     * Updates a savings goal for a specified index.
     * @param index The index of the savings record.
     * @param amount The new savings amount.
     * @param description The new goal description.
     */
    public void updateSavingsGoal(int index, double amount, String description) {
        if (index >= 0 && index < savingsRecords.size()) {
            savingsRecords.get(index).amount = amount;
            savingsRecords.get(index).goal = description;
            System.out.println("I have updated your saving amount and saving goal:");
            System.out.println((index + 1) + ". \t" + savingsRecords.get(index));
        } else {
            System.out.println("Invalid index.");
        }
    }

    /**
     * Deletes the goal of a specified savings record.
     * @param index The index of the savings record.
     */
    public void deleteSavingsGoal(int index) {
        if (index >= 0 && index < savingsRecords.size()) {
            savingsRecords.get(index).goal = " ";
            System.out.println("I have deleted the saving goal:");
            System.out.println((index + 1) + ". \t" + savingsRecords.get(index));
        } else {
            System.out.println("Invalid index.");
        }
    }

    /**
     * Runs the savings management system, processing user commands.
     * @param in The Scanner object for user input.
     */
    public void run(Scanner in) {
        while (true) {
            String input = in.nextLine();
            String[] parts = input.split(" ", 4);
            if (parts.length < 2) {
                System.out.println("Invalid command.");
                return;
            }

            if (input.contains("add savings")) {
                try {
                    double amount = Double.parseDouble(parts[2]);
                    addSavings(amount);
                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
                    System.out.println("Invalid amount format.");
                }
            } else if (input.contains("delete savings")) {
                try {
                    int index = Integer.parseInt(parts[2]) - 1;
                    deleteSavings(index);
                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
                    System.out.println("Invalid index format.");
                }
            } else if (input.contains("savings goal set")) {
                try {
                    String[] goalParts = input.substring(17).split(" / ", 2);
                    double amount = Double.parseDouble(goalParts[0].trim());
                    String description = goalParts[1].trim();
                    setSavingsGoal(amount, description);
                } catch (Exception e) {
                    System.out.println("Invalid format. Use: savings goal set <AMOUNT> / <DESCRIPTION>");
                }
            } else if (input.contains("Exit Savings")) {
                System.out.println("Exited Savings");
                break;
            } else if (input.contains("view savings") || input.contains("savings goal view")) {
                viewSavings();
            } else {
                System.out.println("Unknown command.");
            }
        }
    }
}
